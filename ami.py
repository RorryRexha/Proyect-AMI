import tkinter as tk
import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, cross_val_score
import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# 1. Cargar y Entrenar el Modelo (esto solo se ejecuta una vez)
def entrenar_modelo():
    # Crear el dataset de ejemplo (Pregunta y Respuesta)
    data = pd.DataFrame({
        'Pregunta': [
            '¬øQu√© hago si tengo fiebre alta?',
            '¬øC√≥mo saber si tengo COVID-19?',
            '¬øEs normal sentir dolor en el pecho?',
            '¬øQu√© puedo tomar para el dolor de cabeza?',
            '¬øQu√© hago si tengo diarrea?',
            '¬øCu√°nto tiempo dura la gripe?',
            '¬øQu√© debo hacer si me duele el est√≥mago despu√©s de comer?',
            '¬øC√≥mo puedo prevenir la hipertensi√≥n?',
            '¬øQu√© significa tener colesterol alto?',
            '¬øQu√© hago si tengo una reacci√≥n al√©rgica?',
            '¬øC√≥mo puedo tratar una herida peque√±a en casa?',
            '¬øQu√© debo hacer si tengo un dolor de garganta?',
            '¬øEs peligroso tener presi√≥n arterial alta?',
            '¬øQu√© s√≠ntomas indican una posible fractura √≥sea?',
            '¬øC√≥mo puedo prevenir el resfriado com√∫n?',
            '¬øQu√© hacer si tengo un dolor abdominal intenso?',
            '¬øC√≥mo tratar una picadura de insecto en casa?',
            '¬øCu√°ndo deber√≠a preocuparme por una tos persistente?',
            '¬øQu√© alimentos son buenos para mejorar la digesti√≥n?',
            '¬øC√≥mo identificar si tengo una infecci√≥n urinaria?'
        ],
        'Respuesta': [
            'Mantente hidratado y consulta a un m√©dico si la fiebre persiste m√°s de 3 d√≠as.',
            'Los s√≠ntomas comunes son fiebre, tos seca y fatiga. Realiza una prueba PCR para confirmarlo.',
            'El dolor en el pecho puede ser grave. Consulta a un m√©dico inmediatamente si es severo.',
            'El paracetamol o ibuprofeno suelen ser efectivos. Consulta a un m√©dico si persiste.',
            'Mant√©n una dieta blanda y bebe muchos l√≠quidos. Si dura m√°s de 2 d√≠as, consulta a un m√©dico.',
            'La gripe suele durar entre 5 y 7 d√≠as, aunque la fatiga puede persistir durante m√°s tiempo. Si los s√≠ntomas persisten o empeoran, consulta a un m√©dico.',
            'Podr√≠a ser indigesti√≥n o una alergia alimentaria. Intenta identificar el alimento que causa el malestar y evita consumirlo. Si el dolor persiste, consulta a un m√©dico.',
            'Mant√©n una dieta baja en sal, haz ejercicio regularmente, evita el tabaco y controla el estr√©s. Consultar a un m√©dico para un plan espec√≠fico es recomendable.',
            'El colesterol alto puede aumentar el riesgo de enfermedades card√≠acas. Se recomienda una dieta baja en grasas saturadas, ejercicio regular, y en algunos casos, medicaci√≥n.',
            'Si la reacci√≥n es leve, los antihistam√≠nicos pueden ayudar. Si tienes dificultad para respirar o hinchaz√≥n grave, busca atenci√≥n m√©dica de inmediato.',
            'Lava la herida con agua y jab√≥n, aplica un antis√©ptico y c√∫brela con una venda limpia.',
            'Gargarear con agua salada y tomar l√≠quidos calientes puede ayudar. Consulta a un m√©dico si los s√≠ntomas persisten m√°s de 3 d√≠as.',
            'La presi√≥n arterial alta puede aumentar el riesgo de enfermedades card√≠acas y accidentes cerebrovasculares. Es importante controlarla y tratarla adecuadamente.',
            'S√≠ntomas de una posible fractura incluyen dolor intenso, hinchaz√≥n, y dificultad para mover la parte afectada. Consulta a un m√©dico para una evaluaci√≥n.',
            'Mant√©n una buena higiene, evita el contacto cercano con personas enfermas, y considera vacunarte contra la gripe.',
            'Podr√≠a ser una indigesti√≥n o una condici√≥n m√°s seria. Consulta a un m√©dico si el dolor es severo, persistente o est√° acompa√±ado de otros s√≠ntomas graves.',
            'Aplica una compresa fr√≠a para reducir la hinchaz√≥n y toma antihistam√≠nicos si es necesario. Consulta a un m√©dico si hay signos de una reacci√≥n al√©rgica severa.',
            'Una tos persistente puede ser un signo de una infecci√≥n respiratoria o alergias. Consulta a un m√©dico si la tos dura m√°s de 2 semanas.',
            'Los alimentos ricos en fibra, como frutas, verduras y granos enteros, pueden ayudar a mejorar la digesti√≥n.',
            'S√≠ntomas comunes incluyen dolor al orinar, necesidad frecuente de orinar, y orina turbia o con mal olor. Consulta a un m√©dico para un diagn√≥stico adecuado.'
        ]
    })
    
    # Caracter√≠sticas y etiquetas
    X = data['Pregunta']
    y = data['Respuesta']

    # Vectorizaci√≥n TF-IDF
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(X)

    # Divisi√≥n en conjuntos de entrenamiento y prueba
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Entrenamiento del modelo RandomForest
    model = RandomForestClassifier()
    model.fit(X_train, y_train)

    # Guardar el modelo entrenado
    joblib.dump(model, 'modelo_entrenado.pkl')
    joblib.dump(vectorizer, 'vectorizer.pkl')

    # Evaluaci√≥n del modelo
    evaluar_modelo(model, X_test, y_test, X, y)

# 2. Cargar el modelo para usarlo en predicciones
def cargar_modelo():
    model = joblib.load('modelo_entrenado.pkl')
    vectorizer = joblib.load('vectorizer.pkl')
    return model, vectorizer

# 3. Funci√≥n para responder preguntas usando el modelo cargado
def responder_pregunta(model, vectorizer, pregunta):
    pregunta_vectorizada = vectorizer.transform([pregunta])
    prediccion = model.predict(pregunta_vectorizada)
    return prediccion[0]

# 4. Evaluar el modelo
def evaluar_modelo(model, X_test, y_test, X, y):
    y_pred = model.predict(X_test)

    # Precisi√≥n del modelo
    precision = accuracy_score(y_test, y_pred)
    print(f"Precisi√≥n del modelo: {precision * 100:.2f}%")

    # Matriz de confusi√≥n
    matriz_confusion = confusion_matrix(y_test, y_pred)
    print("Matriz de Confusi√≥n:\n", matriz_confusion)

    # Reporte de clasificaci√≥n
    reporte = classification_report(y_test, y_pred)
    print("Reporte de Clasificaci√≥n:\n", reporte)

    # Validaci√≥n cruzada
    scores = cross_val_score(model, X, y, cv=5)
    print(f"Precisi√≥n media en validaci√≥n cruzada: {np.mean(scores) * 100:.2f}%")

# 5. Crear la Interfaz Gr√°fica
def crear_interfaz_grafica():
    # Cargar el modelo entrenado y el vectorizador
    model, vectorizer = cargar_modelo()

    # Funci√≥n para el bot√≥n "Enviar"
    def enviar_comando():
        comando = entrada.get()
        respuesta = responder_pregunta(model, vectorizer, comando)
        mostrar_respuesta(comando, respuesta)
        entrada.delete(0, tk.END)

    def mostrar_respuesta(comando, respuesta):
        historial.config(state=tk.NORMAL)
        historial.insert(tk.END, f"T√∫: {comando}\n")
        historial.insert(tk.END, f"AMI: {respuesta}\n\n")
        historial.config(state=tk.DISABLED)
        historial.see(tk.END)  # Desplazarse al final del texto

    # Crear la ventana principal
    root = tk.Tk()
    root.title("Asistente M√©dico Inteligente (AMI)")
    root.geometry("800x450")

    # Configuraci√≥n de colores
    bg_color = "#0057D8"
    panel_color = "#4C89FF"
    font_color = "white"

    # Estilo de la ventana
    root.configure(bg=bg_color)

    # Marco superior para el t√≠tulo y logo
    top_frame = tk.Frame(root, bg=bg_color, height=60)
    top_frame.pack(fill="x")

    title_label = tk.Label(top_frame, text="AMI", font=("Arial", 20), fg=font_color, bg=bg_color)
    title_label.pack(side="left", padx=20, pady=10)

    # Marco izquierdo para el historial y perfil
    left_frame = tk.Frame(root, bg=panel_color, width=200)
    left_frame.pack(side="left", fill="y")

    history_button = tk.Button(left_frame, text="History", font=("Arial", 16), fg=font_color, bg=panel_color, bd=0)
    history_button.pack(pady=20, padx=10, anchor="w")

    profile_button = tk.Button(left_frame, text="Profile", font=("Arial", 16), fg=font_color, bg=panel_color, bd=0)
    profile_button.pack(pady=20, padx=10, anchor="w")

    # Marco derecho para el chat
    chat_frame = tk.Frame(root, bg=panel_color)
    chat_frame.pack(expand=True, fill="both")

    chat_label = tk.Label(chat_frame, text="Chat", font=("Arial", 16), fg=font_color, bg=panel_color)
    chat_label.pack(anchor="nw", padx=20, pady=10)

    ami_logo = tk.Label(chat_frame, text="ü§ñ\n‚ù§Ô∏è", font=("Arial", 60), fg=font_color, bg=panel_color)
    ami_logo.pack(expand=True)

    # Mostrar mensaje de bienvenida al iniciar
    welcome_message = "¬°Bienvenido a AMI! Estoy aqu√≠ para ayudarte como te sientes el dia de Hoy."
    output_label = tk.Label(chat_frame, text=welcome_message, wraplength=400, bg=panel_color, fg=font_color, font=("Arial", 12))
    output_label.pack(pady=10)

    # Marco para el historial de mensajes
    historial = tk.Text(chat_frame, bg=panel_color, fg=font_color, font=("Arial", 12), wrap=tk.WORD, state=tk.DISABLED)
    historial.pack(expand=True, fill="both", padx=20, pady=10)

    input_frame = tk.Frame(chat_frame, bg=panel_color)
    input_frame.pack(side="bottom", fill="x", padx=20, pady=20)

    entrada = tk.Entry(input_frame, font=("Arial", 14), bd=0)
    entrada.pack(fill="x", padx=10, pady=5)  # Ajustar el espacio

    send_button = tk.Button(input_frame, text="Enviar", command=enviar_comando, bg=panel_color, fg=font_color)
    send_button.pack(side="right", padx=10)

    # Iniciar el bucle principal de la interfaz gr√°fica
    root.mainloop()

# 6. Ejecutar la interfaz gr√°fica y entrenar el modelo
if __name__ == "__main__":
    # Si el modelo a√∫n no est√° entrenado, descomenta la siguiente l√≠nea
    #entrenar_modelo()

    crear_interfaz_grafica()
